<#@ template language="C#v3.5"  hostspecific="True" debug="True"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Codenesium.GenerationLibrary.Generation" #>
<#@ import namespace="Codenesium.GenerationLibrary.Generation.Helpers" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.String" Name="TREEPARAMETER"#>
<#@ parameter type="System.String" Name="CLASSNAME"#>
<#@ parameter type="System.String" Name="CLASSNAMESPACE"#>

<#

if(String.IsNullOrEmpty(TREEPARAMETER))
{
throw new ArgumentException("parameter TREEPARAMETER cannot be null");
}
if(String.IsNullOrEmpty(CLASSNAME))
{
throw new ArgumentException("parameter CLASSNAME cannot be null");
}
if(String.IsNullOrEmpty(CLASSNAMESPACE))
{
throw new ArgumentException("parameter CLASSNAMESPACE cannot be null");
}


var lowerClassName =  CLASSNAME[0].ToString().ToLower() + CLASSNAME.Substring(1,CLASSNAME.Length -1) ;
XElement xml = XElement.Parse(TREEPARAMETER);
var fieldList  = Codenesium.GenerationLibrary.Generation.GenerationParameter.ParseParameters(xml);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using Codenesium.Foundation.Web.UnitofWork;
using Autofac.Extras.NLog;

namespace <#= CLASSNAMESPACE #>
{
    public class <#= CLASSNAME #>Manager : AbstractTransactionsSupported
    {

        private <#= CLASSNAME #>Mapper _<#= lowerClassName #>Mapper;
        public <#= CLASSNAME #>Manager(ILogger logger,
            DbContext objCtx,
            <#= CLASSNAME #>Mapper <#= lowerClassName #>Mapper)
            : base(logger, objCtx)
        {
            this._<#= lowerClassName #>Mapper = <#= lowerClassName #>Mapper;
        }

        public void Create(<#= CLASSNAME #> <#= lowerClassName #>)
        {
            var ef<#= CLASSNAME #>  = new <#= CLASSNAME #> ();
            this._<#= lowerClassName #>Mapper.Map<#= CLASSNAME #>ToEF(<#= lowerClassName #>, ef<#= CLASSNAME #> );
            this._context.Set<<#= CLASSNAME #>>().Add(ef<#= CLASSNAME #> );
            this._context.SaveChanges();
        }

        public void Update(<#= CLASSNAME #> <#= lowerClassName #>)
        {
            var ef<#= CLASSNAME #> = this._context.Set<<#= CLASSNAME #>>().Where(x => x.id == <#= lowerClassName #>.Id).FirstOrDefault();

            if (ef<#= CLASSNAME #> == null)
            {
                this._logger.Error("Unable to find id:{0}", ef<#= CLASSNAME #>.id);
            }
            else
            {
                this._<#= lowerClassName #>Mapper.Map<#= CLASSNAME #>ToEF(<#= lowerClassName #>, ef<#= CLASSNAME #>);
                this._context.SaveChanges();
            }
        }

        public <#= CLASSNAME #> SelectById(int id)
        {
            var <#= lowerClassName #> = this._context.Set<<#= CLASSNAME #>>().FirstOrDefault(x => x.id == id);

            if (<#= lowerClassName #> == null)
            {
                return null;
            }
            else
            {
                return this._<#= lowerClassName #>Mapper.MapEF<#= CLASSNAME #>To<#= CLASSNAME #>(<#= lowerClassName #>);
            }
        }




		public void MapBO<#= CLASSNAME #>ToEF(BO<#= CLASSNAME #> bo<#= CLASSNAME #>, <#= CLASSNAME #>   ef<#= CLASSNAME #> )
        {<#= DotNetHelper.GenerateFieldAssignments(fieldList,"ef" + CLASSNAME,"bo" + CLASSNAME,false,true ) #>
        }

        public <#= CLASSNAME #> MapEF<#= CLASSNAME #>ToBO<#= CLASSNAME #>(<#= CLASSNAME #> ef<#= CLASSNAME #> )
        {
            return new <#= CLASSNAME #>()
            {<#= DotNetHelper.GenerateFieldAssignments(fieldList,"","ef" + CLASSNAME,true,false) #>
			};
        }
    }
}
