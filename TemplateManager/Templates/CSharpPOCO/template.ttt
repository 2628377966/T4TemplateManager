<#@ template language="C#v3.5"  hostspecific="True" debug="True"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Codenesium.GenerationLibrary.Generation" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.String" Name="TREEPARAMETER"#>
<#@ parameter type="System.String" Name="CLASSNAME"#>
<#@ parameter type="System.String" Name="CLASSNAMESPACE"#>

<#

if(String.IsNullOrEmpty(TREEPARAMETER))
{
throw new ArgumentException("parameter TREEPARAMETER cannot be null");
}
if(String.IsNullOrEmpty(CLASSNAME))
{
throw new ArgumentException("parameter CLASSNAME cannot be null");
}
if(String.IsNullOrEmpty(CLASSNAMESPACE))
{
throw new ArgumentException("parameter CLASSNAMESPACE cannot be null");
}



XElement xml = XElement.Parse(TREEPARAMETER);
var storedProcFieldList  = Codenesium.GenerationLibrary.Generation.GenerationParameter.ParseParameters(xml);

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;
namespace <#= CLASSNAMESPACE #>
{
    public partial class <#= CLASSNAME #> :I<#= CLASSNAME #> 
    {
<#string properties = String.Empty;
		properties += "        public Guid InternalId{get;set;}" + Environment.NewLine;
		for( int i =0;i < storedProcFieldList.Count; i++)
		{
			DbType fieldType = Codenesium.GenerationLibrary.Database.MSSQL.ParseType(storedProcFieldList[i].DataType);
			if(String.IsNullOrEmpty(storedProcFieldList[i].BOObjectType))
			{
				if(storedProcFieldList[i].Name.ToUpper() == "ID")
				{
					properties += "        [Key]" + Environment.NewLine;
				}
				properties += "        " +  Codenesium.GenerationLibrary.Generation.Helpers.DotNetHelper.GenerateFieldProperty(storedProcFieldList[i].Name,fieldType) + Environment.NewLine;
			}
			else
			{
			   properties +=  "        public I" + storedProcFieldList[i].BOObjectType + " " + storedProcFieldList[i].Name + "{get;set;}" + Environment.NewLine;
			}
		}#><#= properties.TrimEnd() #>
        public <#= CLASSNAME #>()
        {
        }
    }
}









