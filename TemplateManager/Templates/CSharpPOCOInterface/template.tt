<#@ template language="C#v3.5"  hostspecific="True" debug="True"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Codenesium.GenerationLibrary.Generation" #>
<#@ output extension=".sql" #>
<#@ parameter type="System.String" Name="treeParameter"#>
<#@ parameter type="System.String" Name="interfaceName"#>
<#@ parameter type="System.String" Name="namespace"#>

<#
XElement xml = XElement.Parse(treeParameter);
var storedProcFieldList  = Codenesium.GenerationLibrary.Generation.GenerationParameter.ParseParameters(xml);

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
namespace <#= namespace #>
{
    public interface <#= interfaceName #>
    {
<#string intefaceProperties = String.Empty;
		for( int i =0;i < storedProcFieldList.Count; i++)
		{
			DbType interfaceFieldType = Codenesium.GenerationLibrary.Database.MSSQL.ParseType(storedProcFieldList[i].DataType);
			if(String.IsNullOrEmpty(storedProcFieldList[i].BOObjectType))
			{
				intefaceProperties += "        " + Codenesium.GenerationLibrary.Generation.Helpers.DotNetHelper.GenerateFieldPropertyType(interfaceFieldType) + " " + storedProcFieldList[i].Name +"{get;set;}" + Environment.NewLine;
			}
			else
			{
			   intefaceProperties +=  "        I" + storedProcFieldList[i].BOObjectType + " " +storedProcFieldList[i].Name + "{get;set;}" + Environment.NewLine;
			}
			
			
		}#><#= intefaceProperties.TrimEnd() #>
     }
}
