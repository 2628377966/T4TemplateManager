<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ Assembly Name="TemplateGenerator" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Data" #>
<#@ parameter type="Codenesium.TemplateGenerator.Interfaces.IDatabaseTable" Name="CNTable"#>
<#@ parameter type="System.String" Name="Namespace"#>
<#@ parameter type="System.String" Name="EntitiesName"#>
<#@ parameter type="System.String" Name="DatabaseTable"#>
<#@ parameter type="System.String" Name="DataAccessName"#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
<#
string ObjectName =  Codenesium.TemplateGenerator.Classes.Generation.Helpers.CommonHelper.ConvertTableNameToRepositoryName(DatabaseTable);
string BasicObjectName =  Codenesium.TemplateGenerator.Classes.Generation.Helpers.CommonHelper.ConvertTableNameToBasicObjectName(DatabaseTable);
string EFObjectName = "ef" + BasicObjectName;
#>

namespace <#= Namespace #>
{
    public partial class <#= ObjectName #> : I<#= ObjectName #>
    {
        <#= EntitiesName  #> _objCtx;

        public <#= ObjectName #>()
        {
        }

        public <#= ObjectName #>(<#= EntitiesName  #> objCtx)
        {
            this._objCtx = objCtx;
        }

        public int CreateRecord(<#= BasicObjectName #> passedObject)
        {
            <#=DataAccessName#>.<#= DatabaseTable #> record = new <#=DataAccessName#>.<#= DatabaseTable #>();
            <#= Codenesium.TemplateGenerator.Classes.Generation.Helpers.DotNetHelper.GenerateFieldAssignmentsLeftSideNoCamelCase(CNTable.FieldList,"record","passedObject") #>
            record.recordStatus =  Codenesium.Foundation.BO.Constants.RECORD_STATUS_CREATED;
            this._objCtx.<#= DatabaseTable #>.Add(record);
            this._objCtx.SaveChanges();
            return record.id;          
        }
      
        public bool UpdateRecord(<#= BasicObjectName #> passedObject)
        {
             <#=DataAccessName#>.<#= DatabaseTable #> record = this.SearchLinqEF(x => x.id == passedObject.Id && x.recordStatus !=  Codenesium.Foundation.BO.Constants.RECORD_STATUS_DELETED).FirstOrDefault();
            if (record == null)
            {
                return false;
            }
            else
            {
                 <#= Codenesium.TemplateGenerator.Classes.Generation.Helpers.DotNetHelper.GenerateFieldAssignmentsLeftSideNoCamelCase(CNTable.FieldList,"record","passedObject") #>
                this._objCtx.SaveChanges();
                return true;
            }

        }
   
        public bool SoftDeleteRecord(int id)
        {
             <#=DataAccessName#>.<#= DatabaseTable #> record = this.SearchLinqEF(x => x.id == id && x.recordStatus !=  Codenesium.Foundation.BO.Constants.RECORD_STATUS_DELETED).FirstOrDefault();
            if (record == null)
            {
                return false;
            }
            else
            {
                record.recordStatus =  Codenesium.Foundation.BO.Constants.RECORD_STATUS_DELETED;
                this._objCtx.SaveChanges();
                return true;
            }

        }
        
        public bool HardDeleteRecord(int id)
        {
             <#=DataAccessName#>.<#= DatabaseTable #> record = this.SearchLinqEF(x => x.id == id).FirstOrDefault();
            if (record == null)
            {
                return false;
            }
            else
            {
                this._objCtx.<#= DatabaseTable #>.Remove(record);
                this._objCtx.SaveChanges();
                return true;
            }

        }
        
        
        private <#= BasicObjectName #> ConvertEFObjectToBOObject(<#= DataAccessName#>.<#= DatabaseTable #> <#= EFObjectName #>)
        {
            <#= BasicObjectName #> record = new <#= BasicObjectName #>();
            <#= Codenesium.TemplateGenerator.Classes.Generation.Helpers.DotNetHelper.GenerateReverseFieldAssignmentsLeftSideNoCamelCase(CNTable.FieldList,"record",EFObjectName) #>
            return record;
        }
        
        
        private List<<#= BasicObjectName #>> SearchLinqBO(Expression<Func<<#= DataAccessName#>.<#= DatabaseTable #>, bool>> predicate)
        {
            List<<#= DataAccessName#>.<#= DatabaseTable #>> list = this._objCtx.Set<<#= DataAccessName#>.<#= DatabaseTable #>>().Where(predicate).ToList<<#= DataAccessName#>.<#= DatabaseTable #>>();
            
            List<<#= BasicObjectName #>> response = new List<<#= BasicObjectName #>>();
            
            foreach(<#= DataAccessName#>.<#= DatabaseTable #> record in list)
            {
                response.Add( ConvertEFObjectToBOObject(record));
            }
           
            return response;             
        }
        
         private List<<#=  DataAccessName#>.<#= DatabaseTable #>> SearchLinqEF(Expression<Func<<#= DataAccessName#>.<#= DatabaseTable #>, bool>> predicate)
         {
            List<<#= DataAccessName#>.<#= DatabaseTable #>> list = this._objCtx.Set<<#= DataAccessName#>.<#= DatabaseTable #>>().Where(predicate).ToList<<#= DataAccessName#>.<#= DatabaseTable #>>();
            return list;            
        }
        
        public <#= BasicObjectName #> SelectByID(int id)
        {
           List<<#= BasicObjectName #> > list = this.SearchLinqBO(x => x.id == id && x.recordStatus == Constants.RECORD_STATUS_CREATED);
           return list.FirstOrDefault();
        }
    }
 }